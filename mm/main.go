package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/OsoianMarcel/claymore-go"
	"log"
	"net/http"
	"time"
)

type AutoGenerated struct {
	Data struct {
		Stats struct {
			MinerVersion   string `json:"miner_version"`
			RunningMinutes int    `json:"running_minutes"`
			EthReport      struct {
				TotalMhs       int `json:"total_mhs"`
				Shares         int `json:"shares"`
				RejectedShares int `json:"rejected_shares"`
				InvalidShares  int `json:"invalid_shares"`
				PoolSwitches   int `json:"pool_switches"`
				MhsPerGpu      []struct {
					Mhs int `json:"mhs"`
					Gpu int `json:"gpu"`
				} `json:"mhs_per_gpu"`
			} `json:"eth_report"`
			AltReport struct {
				TotalMhs       int `json:"total_mhs"`
				Shares         int `json:"shares"`
				RejectedShares int `json:"rejected_shares"`
				InvalidShares  int `json:"invalid_shares"`
				PoolSwitches   int `json:"pool_switches"`
				MhsPerGpu      []struct {
					Mhs int `json:"mhs"`
					Gpu int `json:"gpu"`
				} `json:"mhs_per_gpu"`
			} `json:"alt_report"`
			TempAndFanReports []struct {
				Temp int `json:"temp"`
				Fan  int `json:"fan"`
				Gpu  int `json:"gpu"`
			} `json:"temp_and_fan_reports"`
			Pools []string `json:"pools"`
		} `json:"stats"`
		Extra struct {
			HighestTemp struct {
				Temp int `json:"temp"`
				Fan  int `json:"fan"`
				Gpu  int `json:"gpu"`
			} `json:"highest_temp"`
		} `json:"extra"`
	} `json:"data"`
}

type ErrorResponse struct {
	Error string `json:"error"`
}

type DataResponse struct {
	Data interface{} `json:"data"`
}

type ExtraResponse struct {
	HighestTemp claymore.TempAndFanReport `json:"highest_temp"`
}

type StatsResponse struct {
	Stats claymore.StatsModel `json:"stats"`
	Extra ExtraResponse       `json:"extra"`
}

var x1, x2, x3 []int
var x1sum, x2max, x2min, x3max, x3min, x2rmax, x2rmin, x3rmax, x3rmin int

func get_json_miner() {
	x2max = 80
	x2min = 0
	x3max = 100
	x3min = 0
	x1sum = 0
	x1 = nil
	x2 = nil
	x3 = nil
	mm := [3]string{"109.172.77.189:33332", "109.172.77.189:33333", "109.172.77.189:33337"}
	//mm := []string{"109.172.77.189:33332"}
	for i := 0; i < len(mm); i++ {
		cc := claymore.NewClient(mm[i])
		resp, err := cc.GetStats()
		if err != nil {
			// TODO: Handle error.
		}
		writer := bytes.NewBuffer([]byte{})
		extraResp := ExtraResponse{}
		statsResp := StatsResponse{resp, extraResp}
		json.NewEncoder(writer).Encode(DataResponse{statsResp})
		//fmt.Println(writer.String())
		writer1 := []byte(writer.String())
		var app = AutoGenerated{}
		err1 := json.Unmarshal(writer1, &app)
		if err1 != nil {
			log.Fatal("error")
		}
		//fmt.Println(app.Data.Stats.EthReport.MhsPerGpu)
		for _, row := range app.Data.Stats.EthReport.MhsPerGpu {
			//fmt.Println(row.Mhs)
			x1 = append(x1, row.Mhs)
			x1sum = x1sum + row.Mhs
		}
		for _, row := range app.Data.Stats.TempAndFanReports {
			x2 = append(x2, row.Temp)
			if row.Temp > x2min {
				x2rmax = row.Temp
				x2min = row.Temp
			}
			if row.Temp < x2max {
				x2rmin = row.Temp
				x2max = row.Temp
			}
			x3 = append(x3, row.Fan)
			if row.Fan > x3min {
				x3rmax = row.Fan
				x3min = row.Fan
			}
			if row.Fan < x3max {
				x3rmin = row.Fan
				x3max = row.Fan
			}
		}
	}
}

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, time.Now().Format("15:04:05 01-02-2006"), "\nMhs=", x1sum, "\nTmax=", x2rmax, "\nTmin=", x2rmin, "\nCmax=", x3rmax, "\nCmin=", x3rmin, "\n")

	for i := 0; i < len(x1); i++ {
		fmt.Fprintln(w, x1[i], x2[i], x3[i])
	}
	//for _, v := range x1 {
	//	fmt.Fprintln(w, v)
	//}
}
func get_json_miner_timer() {
	for {
		get_json_miner()
		time.Sleep(60 * time.Second)
	}
}

func main() {
	go get_json_miner_timer()
	http.HandleFunc("/", handler)
	log.Fatal(http.ListenAndServe(":3333", nil))
}
